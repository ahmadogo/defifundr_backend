// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: security_events.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSecurityEvent = `-- name: CreateSecurityEvent :one
INSERT INTO security_events (
    id, user_id, event_type, ip_address, user_agent, metadata, timestamp
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, event_type, ip_address, user_agent, metadata, timestamp
`

type CreateSecurityEventParams struct {
	ID        uuid.UUID        `json:"id"`
	UserID    uuid.UUID        `json:"user_id"`
	EventType string           `json:"event_type"`
	IpAddress string           `json:"ip_address"`
	UserAgent pgtype.Text      `json:"user_agent"`
	Metadata  []byte           `json:"metadata"`
	Timestamp pgtype.Timestamp `json:"timestamp"`
}

func (q *Queries) CreateSecurityEvent(ctx context.Context, arg CreateSecurityEventParams) (SecurityEvents, error) {
	row := q.db.QueryRow(ctx, createSecurityEvent,
		arg.ID,
		arg.UserID,
		arg.EventType,
		arg.IpAddress,
		arg.UserAgent,
		arg.Metadata,
		arg.Timestamp,
	)
	var i SecurityEvents
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.Timestamp,
	)
	return i, err
}

const getRecentLoginEventsByUserID = `-- name: GetRecentLoginEventsByUserID :many
SELECT id, user_id, event_type, ip_address, user_agent, metadata, timestamp FROM security_events
WHERE user_id = $1 AND event_type = 'login'
ORDER BY timestamp DESC
LIMIT $2
`

type GetRecentLoginEventsByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetRecentLoginEventsByUserID(ctx context.Context, arg GetRecentLoginEventsByUserIDParams) ([]SecurityEvents, error) {
	rows, err := q.db.Query(ctx, getRecentLoginEventsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityEvents{}
	for rows.Next() {
		var i SecurityEvents
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecurityEventsByUserIDAndType = `-- name: GetSecurityEventsByUserIDAndType :many
SELECT id, user_id, event_type, ip_address, user_agent, metadata, timestamp FROM security_events
WHERE user_id = $1
  AND event_type = $2
  AND timestamp BETWEEN $3 AND $4
ORDER BY timestamp DESC
`

type GetSecurityEventsByUserIDAndTypeParams struct {
	UserID      uuid.UUID        `json:"user_id"`
	EventType   string           `json:"event_type"`
	Timestamp   pgtype.Timestamp `json:"timestamp"`
	Timestamp_2 pgtype.Timestamp `json:"timestamp_2"`
}

func (q *Queries) GetSecurityEventsByUserIDAndType(ctx context.Context, arg GetSecurityEventsByUserIDAndTypeParams) ([]SecurityEvents, error) {
	rows, err := q.db.Query(ctx, getSecurityEventsByUserIDAndType,
		arg.UserID,
		arg.EventType,
		arg.Timestamp,
		arg.Timestamp_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityEvents{}
	for rows.Next() {
		var i SecurityEvents
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

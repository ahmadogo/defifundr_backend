// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_wallets.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserWallet = `-- name: CreateUserWallet :one
INSERT INTO user_wallets (
    id, user_id, address, type, chain, is_default, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, address, type, chain, is_default, created_at, updated_at
`

type CreateUserWalletParams struct {
	ID        uuid.UUID        `json:"id"`
	UserID    uuid.UUID        `json:"user_id"`
	Address   string           `json:"address"`
	Type      string           `json:"type"`
	Chain     string           `json:"chain"`
	IsDefault bool             `json:"is_default"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUserWallet(ctx context.Context, arg CreateUserWalletParams) (UserWallets, error) {
	row := q.db.QueryRow(ctx, createUserWallet,
		arg.ID,
		arg.UserID,
		arg.Address,
		arg.Type,
		arg.Chain,
		arg.IsDefault,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserWallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Type,
		&i.Chain,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserWallet = `-- name: DeleteUserWallet :exec
DELETE FROM user_wallets WHERE id = $1
`

func (q *Queries) DeleteUserWallet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserWallet, id)
	return err
}

const getWalletByAddress = `-- name: GetWalletByAddress :one
SELECT id, user_id, address, type, chain, is_default, created_at, updated_at FROM user_wallets WHERE address = $1
`

func (q *Queries) GetWalletByAddress(ctx context.Context, address string) (UserWallets, error) {
	row := q.db.QueryRow(ctx, getWalletByAddress, address)
	var i UserWallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Type,
		&i.Chain,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletsByUserID = `-- name: GetWalletsByUserID :many
SELECT id, user_id, address, type, chain, is_default, created_at, updated_at FROM user_wallets WHERE user_id = $1
`

func (q *Queries) GetWalletsByUserID(ctx context.Context, userID uuid.UUID) ([]UserWallets, error) {
	rows, err := q.db.Query(ctx, getWalletsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserWallets{}
	for rows.Next() {
		var i UserWallets
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.Type,
			&i.Chain,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWallet = `-- name: UpdateUserWallet :one
UPDATE user_wallets
SET is_default = $2, updated_at = $3
WHERE id = $1
RETURNING id, user_id, address, type, chain, is_default, created_at, updated_at
`

type UpdateUserWalletParams struct {
	ID        uuid.UUID        `json:"id"`
	IsDefault bool             `json:"is_default"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateUserWallet(ctx context.Context, arg UpdateUserWalletParams) (UserWallets, error) {
	row := q.db.QueryRow(ctx, updateUserWallet, arg.ID, arg.IsDefault, arg.UpdatedAt)
	var i UserWallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Type,
		&i.Chain,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

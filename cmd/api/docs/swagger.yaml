basePath: /api/v1
definitions:
  request.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  request.CompletePasswordResetRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 8
        type: string
      otp:
        type: string
    required:
    - email
    - new_password
    - otp
    type: object
  request.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      provider:
        type: string
      provider_id:
        type: string
      web_auth_token:
        type: string
    required:
    - web_auth_token
    type: object
  request.LogoutRequest:
    properties:
      session_id:
        type: string
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  request.RegisterAddressDetailsRequest:
    properties:
      city:
        type: string
      country:
        type: string
      postal_code:
        type: string
      user_address:
        type: string
    required:
    - city
    - country
    - postal_code
    - user_address
    type: object
  request.RegisterBusinessDetailsRequest:
    properties:
      company_address:
        type: string
      company_city:
        type: string
      company_country:
        type: string
      company_name:
        type: string
      company_postal_code:
        type: string
      company_website:
        type: string
      employment_type:
        type: string
    required:
    - company_address
    - company_city
    - company_country
    - company_name
    type: object
  request.RegisterUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      provider:
        type: string
      provider_id:
        type: string
      web_auth_token:
        type: string
    required:
    - web_auth_token
    type: object
  request.RevokeDeviceRequest:
    properties:
      session_id:
        type: string
    required:
    - session_id
    type: object
  request.UpdateProfileRequest:
    properties:
      company_website:
        type: string
      employment_type:
        type: string
      first_name:
        type: string
      gender:
        type: string
      job_role:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      residential_country:
        type: string
    required:
    - first_name
    - last_name
    - nationality
    type: object
  request.VerifyMFARequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  request.VerifyResetOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  request.WaitlistJoinRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      referral_code:
        type: string
      referral_source:
        type: string
    required:
    - email
    type: object
  request.Web3AuthLoginRequest:
    properties:
      web_auth_token:
        type: string
    required:
    - web_auth_token
    type: object
  response.ErrorResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.PageResponse:
    properties:
      items: {}
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  response.ProfileCompletionResponse:
    properties:
      completion_percentage:
        type: integer
      missing_fields:
        items:
          type: string
        type: array
      required_actions:
        items:
          type: string
        type: array
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.UserResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      provider:
        type: string
      provider_id:
        type: string
      updated_at:
        type: string
    type: object
  response.WaitlistEntryResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      invited_date:
        type: string
      position:
        type: integer
      referral_code:
        type: string
      referral_source:
        type: string
      signup_date:
        type: string
      status:
        type: string
    type: object
  response.WaitlistStatsResponse:
    properties:
      conversion_rate:
        type: number
      invited_count:
        type: integer
      registered_count:
        type: integer
      sources:
        additionalProperties:
          type: integer
        type: object
      total_signups:
        type: integer
      waiting_count:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: hello@defifundr.com
    name: DefiFundr Support
    url: http://defifundr.com/support
  description: Decentralized Payroll and Invoicing Platform for Remote Teams
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DefiFundr API
  version: "1.0"
paths:
  /admin/waitlist:
    get:
      consumes:
      - application/json
      description: List waitlist entries with pagination and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Filter by status (waiting, invited, registered)
        in: query
        name: status
        type: string
      - description: Filter by referral source
        in: query
        name: source
        type: string
      - description: Order by (signup_date_asc, signup_date_desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of waitlist entries
          schema:
            $ref: '#/definitions/response.PageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List waitlist entries
      tags:
      - waitlist
  /admin/waitlist/export:
    get:
      consumes:
      - application/json
      description: Export all waitlist data as CSV
      produces:
      - text/csv
      responses:
        "200":
          description: CSV file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export waitlist data
      tags:
      - waitlist
  /admin/waitlist/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about the waitlist
      produces:
      - application/json
      responses:
        "200":
          description: Waitlist statistics
          schema:
            $ref: '#/definitions/response.WaitlistStatsResponse'
      security:
      - BearerAuth: []
      summary: Get waitlist statistics
      tags:
      - waitlist
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send OTP to email for password reset (email accounts only)
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: OAuth accounts must use provider
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Initiate password reset
      tags:
      - authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password credentials
      parameters:
      - description: User login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login with email/password
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout the authenticated user by revoking their session
      parameters:
      - description: Session ID (optional, defaults to current session)
        in: body
        name: logoutRequest
        schema:
          $ref: '#/definitions/request.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Logout
      tags:
      - authentication
  /auth/profile/address:
    put:
      consumes:
      - application/json
      description: Update address details for a registered user
      parameters:
      - description: Address details
        in: body
        name: addressDetails
        required: true
        schema:
          $ref: '#/definitions/request.RegisterAddressDetailsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address details updated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update address details
      tags:
      - profile
  /auth/profile/business:
    put:
      consumes:
      - application/json
      description: Update business details for a registered user
      parameters:
      - description: Business details
        in: body
        name: businessDetails
        required: true
        schema:
          $ref: '#/definitions/request.RegisterBusinessDetailsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Business details updated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update business details
      tags:
      - profile
  /auth/profile/completion:
    get:
      description: Retrieve the profile completion status for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile completion status retrieved
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.ProfileCompletionResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get profile completion status
      tags:
      - profile
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh access token
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/request.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using email, OTP, and new password
      parameters:
      - description: Password reset details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CompletePasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request or password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid OTP
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Reset password
      tags:
      - authentication
  /auth/security/devices:
    get:
      description: Retrieve all active devices/sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Active devices retrieved
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get active devices
      tags:
      - security
  /auth/security/devices/revoke:
    post:
      consumes:
      - application/json
      description: Revoke a specific device/session for the authenticated user
      parameters:
      - description: Session ID to revoke
        in: body
        name: revokeRequest
        required: true
        schema:
          $ref: '#/definitions/request.RevokeDeviceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Device revoked successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Session does not belong to user
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Revoke device
      tags:
      - security
  /auth/security/events:
    get:
      description: Retrieve security events for the authenticated user's account
      parameters:
      - description: Filter by event type
        in: query
        name: type
        type: string
      - description: Filter by start time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: Filter by end time (RFC3339 format)
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Security events retrieved
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get security events
      tags:
      - security
  /auth/security/mfa/setup:
    post:
      description: Initialize multi-factor authentication for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: MFA setup initiated
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Setup MFA
      tags:
      - security
  /auth/security/mfa/verify:
    post:
      consumes:
      - application/json
      description: Verify an MFA code for the authenticated user
      parameters:
      - description: MFA code
        in: body
        name: mfaCode
        required: true
        schema:
          $ref: '#/definitions/request.VerifyMFARequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA code verified successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid MFA code
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Verify MFA
      tags:
      - security
  /auth/verify-reset-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP for password reset (does not invalidate OTP)
      parameters:
      - description: Email and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyResetOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid OTP
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many attempts
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify password reset OTP
      tags:
      - authentication
  /auth/wallet:
    get:
      description: Retrieve all blockchain wallets linked to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Wallets retrieved successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user wallets
      tags:
      - wallet
  /auth/web3auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate or create a new user with Web3Auth tokens
      parameters:
      - description: Web3Auth token
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/request.Web3AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login or register with Web3Auth
      tags:
      - authentication
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change authenticated user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update authenticated user's profile information
      parameters:
      - description: Profile data to update
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /waitlist:
    post:
      consumes:
      - application/json
      description: Register for early access to the platform
      parameters:
      - description: Waitlist join data
        in: body
        name: join
        required: true
        schema:
          $ref: '#/definitions/request.WaitlistJoinRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully joined waitlist
          schema:
            $ref: '#/definitions/response.WaitlistEntryResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Email already on waitlist
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Join the waitlist
      tags:
      - waitlist
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
